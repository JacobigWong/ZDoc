
如果是游戏编程的话，我建议直接学C++和SDL，或者DirectX，都可以。不要想着一上来就看懂巨著，因为肯定看不懂，花一个月时间搞懂语法，然后就可以开始学SDL，一开始就可以写游戏了。然后建议从最简单的游戏开始写，慢慢来，一个一个的写，每写几个就会发现之前学的编程知识不扎实（正常），然后可以回过头去学新的编程知识，最后把前几个游戏里头挑一两个复杂点的重写一下。等到写了十几二十个估计在同龄程序原里头算相当牛逼的了，这时候数据结构算法你也应该了解一些了。

当然我觉得最重要还是游戏代码的设计，等你写了两三个游戏就会发现代码设计的不好维护起来简直还不如重新写一份，然后你就会想到尼玛以后要写个引擎的话，我这么写不是坑自己嘛。于是你就会想数据结构、代码正规化等问题，不用想太多，直接去网上搜别人现成的方案即可。

中间要不断的上网问，学好英文去国外的论坛多问问，高手很多，没有你问不出来的，只有你想不到问的。此外从一开始就可以用Github上传和维护自己的代码，等你有十个项目，基本上大多数游戏公司你都能进去了。

是个看起来很可怕，其实一年内搞定没问题。我来给你做规划：（我只自学过半年，所以我只能给你半年的实际经验 + 半年的预定）

第一个月：搞定C++的语法，不要刻意做练习，但是比较简单的算法练习（比如说简单的排序）可以自己写写，不要强求。但是一定要看到面向对象编程。这里推荐一本书：

C++ Primer Plus (6th Edition) (Developer's Library): Stephen Prata: 9780321776402: Amazon.com: Books

看到第几章就可以了，之后的慢慢看。注意第一本教材我不敢说我推荐的是很好的，但是第一本教材绝对太重要了，TMD有些教材写的比较简单，很多东西他就漏过去了，然后你写的时候就傻逼了。所以宁可挑一本比较全、难的教材。

第二个月：先别着急看数据结构，先看SDL教程：

Lazy Foo' Productions

然后这个不求速度，而是要开始做游戏了，对你现在就可以开始做游戏了，因为大多数游戏不需要神马复杂的算法，而是在于代码的设计，问题是后者你必须亲自体验。
从现在开始你要记录每个游戏的每个版本的代码，所以Github可以用起来了。

我建议你写的第一个游戏是Tic-Tac-Toe，但是必须用图片和SDL！同时你要考虑怎么用面向对象的技术！这个游戏你可能要两三天才能写完，因为你不熟。在这个过程中你应该学习了很多了。

这个时候你可以开始看数据结构，不要着急，慢慢看，我推荐给你这本书：

http://www.amazon.com/Data-Abstraction-Problem-Solving-Mirrors/dp/0132923726/ref=sr_1_1?ie=UTF8&qid=1396362576&sr=8-1&keywords=data+abstraction+and+problem+solving+with+C%2B%2B

这本书我个人觉得很有意思，因为不但教给你数据结构，还教给你编程的技术，慢慢看，这本书可能要看两个月才能深入到后面几个部分。但是递归、back-tracking这种东西不用追究的太深，能写出来最好，不能写出来要模仿着写出来。数据结构方面看到tree就可以了，tree和graph可以留到以后看。但是这本书的习题最好都做一下！

第三个月：这个时候SDL你应该看了三分之一到一半了，数据结构嘛，应该看完链表和堆栈这些了吧，争取自己把它们全写出来。递归也应该看完了，其实第二本书你应该零零碎碎的看了快一半了。

这个时候你可以写第二个游戏——Snake，贪吃蛇。你可能会花一个礼拜的时间来写以及完善（就是重写）这个游戏，但是这个绝对会有价值，因为贪吃蛇可以说是囊括了游戏的很多内脏——运动、键盘操作、渲染，哦对了别忘记加上开始画面和结束画面（可以是个分数表）。贪吃蛇会教给你一个最简单的游戏引擎应该如何架构，你要学习怎么处理game state，怎么开始规规矩矩的写游戏引擎。


这里我再推荐一个网站：
2D Game Programming Tutorials with SDL

这个网站会教你怎么搞游戏引擎，这是至关重要的！


第四个月：没什么好说的，继续写游戏，开始写Pong，就是乒乓，这里头有最简单的AI（其实主要是教你在游戏引擎的哪里调用AI代码）和物理。书和网站继续看，你可以深入的看指针和面向对象编程了，因为很快你就会用到继承和虚函数。其实很简单，但是你得知道。

同时在Github上发布你的代码，一定要是完成的，立刻可以编译的代码，然后请别人来挑毛病，态度好一些就成了，网上乐于助人的闲人很多。最好的就是哪怕是Pong这个小游戏，有些人也会带着专业游戏编程的态度来评价你的代码，告诉你专业的写法是怎么样的，等等。

这个月你应该可以写下一个游戏，就是Breakout（打砖块）。怎么说呢，这时候你可以说这算是真正的一个引擎了，你这个时候应该可以用比较专业的眼光评价你玩的游戏，也是从开发者的角度，而不是玩家的角度，你会立刻分辨出来两个不同类型的游戏有哪些部分背后的代码其实是差不多的，等等。

哦对了，同时学一下SDL中音频和音乐的处理吧，很简单。何乐而不为。

第五个月，继续写Breakout。同时考虑认识一些同龄的学生美工，因为他们可以帮你做游戏美工，也不会索取物质报酬，大家在一块做游戏会很快乐。如果可能的话甚至建议你们专门租一个小房间一块做游戏，就想象自己是二三十年前的卡马克和罗密欧吧，呵呵会很有动力的。

Breakout这个游戏我建议你们好好写，好好画美工，因为理论上来说做得好这个游戏是可以卖出去的。玩所有其他的breakout游戏，看看它们有什么你们是可以模仿出来的。同时不断的在Github上更新游戏引擎的版本，每做一些新花样或者重新设计或者去bug就更新一个版本。总而言之，尽量做得专业一些。如果你还在学校的话，这个游戏应该足够做毕设了，也应该差不多可以投一般的公司了。但是注意要做的专业！

第六个月，继续看网站，看书（之前的应该都看完一遍，但是可能还没有做完相关的练习），同时继续完善Breakout。好吧我之前的经验就限于此，之后我写的东西是我那时候做的规划。

这个时候你肯定会有很多困惑，比如说我的代码究竟怎么设计比较好？我应该怎么设计我的类才能不至于TMD改了一点就得全改？这时候你应该注意代码规范和代码设计的东西了，上网多问问。

第七个月，虽然说打砖块这个游戏做的很过瘾，但是离你们的梦想还很远。我的建议下个游戏做Galaxia（小蜜蜂），你应该能学到一些新的东西。同理，做的专业一些，美工漂亮一些，不要害怕多加一些你们随机想到的特色。当然，不要忘记发布代码。

第八个月，小蜜蜂应该完善了你们的引擎，所以你们要不可以做个警察抓小偷，要不可以开始学习怎么做滚屏，要不可以开始学习怎么做tile-based引擎。Scrolling和tile-based都搞定了，基本上二维的最基本的东西你们都搞定了（45°引擎的除外）。

这个时候你要静下心来学算法了，因为有些东西必须从技术上突破，建议这个月好好的看tree、递归，等等，总之之前的书没看过的都看一下。


然后你们俩商量一下，接下来是做纵版飞行射击游戏，还是做一个垂直视角的2d rpg游戏。后者显然更麻烦一些，可以考虑做前者。


说实话接下来可能性就太多了。如果是我的话，可以考虑做简单的脚本语言，因为我想做2d rpg，这几乎是不可缺少的。然后我可能着重写一些随机生成迷宫、地形的算法。但是最重要的是，我会学习entity-driven engine，现在大型的游戏引擎很多都用这个了。